How did viewing a diff between two versions of a file help you see the bug that was introduced?
	It helped me find the bug much quicker. Instead of having to go through the entire
	file for the bug, I could just examine the places where the files had been changed.
	The plus and minus symbols clearly show me what the changes were.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
	If I mess up the code, I can always return to a previous version. Without the history
	of the file, I might have to remake the code if I can't find the error in the file.
	
What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having
versions automatically saved, like Google Docs does?
	I like the choice of manually choosing when to create a commit. The commits I make
	would be more logical. On the other hand, since it is manual, I might forget to make
	a commit or not make a commit when I should of.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others,
like Google Docs, treat each file separately?
	Since Git is most often used for code, it makes sense that it saves multiple files in
	one commit. These files often work together.
	
How can you use the commands git log and git diff to view the history of files?
	Git log shows all the commits made in the repository. Git diff can be used to find
	differences between files.

How might using version control make you more confident to make changes that could break something?
	I can always return to a commit without the bug.
	
Now that you have your workspace set up, what do you want to try using Git for?
	All coding stuff!